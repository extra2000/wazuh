/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "vulnerabilityScannerFacade.hpp"
#include "flatbuffers/include/syscollector_deltas_generated.h"
#include "flatbuffers/include/syscollector_synchronization_generated.h"
#include "loggerHelper.h"
#include "vulnerabilityScanner.hpp"
#include "wazuh_modules/vulnerability_scanner/src/policyManager/policyManager.hpp"

constexpr auto VULNERABILITY_SCANNER_TEMPLATE = "queue/indexer/vd_states_template.json";
constexpr auto DEFAULT_QUEUE_PATH = "queue/sockets/queue";
int SOCKET_WAIT = 0;
int MICROSEC_FACTOR = 1000000;

// TODO: Remove LCOV flags once the implementation of the 'Indexer Connector' module is completed
// LCOV_EXCL_START
void VulnerabilityScannerFacade::start(
    const std::function<void(
        const int, const std::string&, const std::string&, const int, const std::string&, const std::string&, va_list)>&
        logFunction,
    const nlohmann::json& configuration,
    const bool noWaitToStop)
{
    try
    {
        m_noWaitToStop = noWaitToStop;

        // Initialize logging
        Log::assignLogFunction(logFunction);

        // Policy manager initialization.
        auto& policyManager = PolicyManager::instance();
        policyManager.initialize(configuration);

        // Return if the module is disabled.
        if (!policyManager.isVulnerabilityDetectionEnabled())
        {
            logInfo(WM_VULNSCAN_LOGTAG, "Vulnerability scanner module is disabled");
            return;
        }

        // Indexer connector initialization.
        if (policyManager.isIndexerEnabled())
        {
            const auto& indexerConfig = policyManager.getIndexerConfiguration();
            m_indexerConnector =
                std::make_shared<IndexerConnector>(policyManager.getIndexerConfiguration(),
                                                   indexerConfig.contains("template_path")
                                                       ? indexerConfig.at("template_path").get_ref<const std::string&>()
                                                       : VULNERABILITY_SCANNER_TEMPLATE,
                                                   logFunction);
        }

        // Database feed manager initialization.
        m_databaseFeedManager =
            std::make_shared<DatabaseFeedManager>(m_indexerConnector, m_shouldStop, m_internalMutex);

        // Socket client initialization to send vulnerability reports.
        if (configuration.contains("wmMaxEps") && configuration.at("wmMaxEps").is_number())
        {
            SOCKET_WAIT = MICROSEC_FACTOR / configuration.at("wmMaxEps").get<int>();
        }
        m_reportSocketClient =
            std::make_shared<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>>(DEFAULT_QUEUE_PATH);
        m_reportSocketClient->connect(
            [](const char* data, uint32_t size, const char* dataHeader, uint32_t sizeHeader) {}, []() {}, SOCK_DGRAM);

        // Add subscribers for policy updates.
        policyManager.addSubscriber(m_databaseFeedManager);

        // Init Orchestrator
        auto scanOrchestrator = std::make_shared<ScanOrchestrator>(
            m_indexerConnector, m_databaseFeedManager, m_reportSocketClient, m_internalMutex);

        // Subscription to syscollector delta events.
        m_syscollectorDeltasSubscription =
            std::make_unique<RouterSubscriber>("deltas-syscollector", "vulnerability_scanner_deltas");
        m_syscollectorDeltasSubscription->subscribe(
            [scanOrchestrator](const std::vector<char>& message)
            {
                std::variant<const SyscollectorDeltas::Delta*,
                             const SyscollectorSynchronization::SyncMsg*,
                             std::shared_ptr<nlohmann::json>>
                    data = SyscollectorDeltas::GetDelta(message.data());

                scanOrchestrator->run(data);
            });

        // Subscription to syscollector rsync events.
        m_syscollectorRsyncSubscription =
            std::make_unique<RouterSubscriber>("rsync-syscollector", "vulnerability_scanner_rsync");
        m_syscollectorRsyncSubscription->subscribe(
            [scanOrchestrator](const std::vector<char>& message)
            {
                std::variant<const SyscollectorDeltas::Delta*,
                             const SyscollectorSynchronization::SyncMsg*,
                             std::shared_ptr<nlohmann::json>>
                    data = SyscollectorSynchronization::GetSyncMsg(message.data());

                scanOrchestrator->run(data);
            });

        m_databaseUpgradeSubscription =
            std::make_unique<RouterSubscriber>("sync-database", "vulnerability_scanner_database");
        m_databaseUpgradeSubscription->subscribe(
            [scanOrchestrator](const std::vector<char>& message)
            {
                std::variant<const SyscollectorDeltas::Delta*,
                             const SyscollectorSynchronization::SyncMsg*,
                             std::shared_ptr<nlohmann::json>>
                    data = std::make_shared<nlohmann::json>(nlohmann::json::parse(message.begin(), message.end()));

                scanOrchestrator->run(data);
            });
        // Switching from Disabled to Enabled: Launch a thread to orchestrate everything.
        // Search for all agents, and find all packages for each agent. Save the Vulnerability Detector (VD) state
        // and configuration in RocksDB.

        // Switching from Enabled to Disabled: Perform clean-up operations. This includes managing local inventory
        // and the indexer, similar to integrityClear, which can be reused.
        // Clear the data for all agents. Consider using a new column family in RocksDB. After the clean-up process
        // is completed, the state should be persistently stored in RocksDB. @ToDo: Implement this functionality.
    }
    catch (const std::exception& e)
    {
        logError(WM_VULNSCAN_LOGTAG, "VulnerabilityScannerFacade::start: %s", e.what());
    }
    catch (...)
    {
        logError(WM_VULNSCAN_LOGTAG, "VulnerabilityScannerFacade::start: Unknown exception");
    }
}
// LCOV_EXCL_STOP

void VulnerabilityScannerFacade::stop()
{
    if (m_noWaitToStop)
    {
        m_shouldStop.store(true);
    }
    m_indexerConnector.reset();
    m_databaseFeedManager.reset();
    m_syscollectorRsyncSubscription.reset();
    m_syscollectorDeltasSubscription.reset();
    m_databaseUpgradeSubscription.reset();
    PolicyManager::instance().teardown();
}
