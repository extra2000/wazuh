#ifndef __GLOBAL_DB_FETCH_HPP
#define __GLOBAL_DB_FETCH_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketDBWrapper.hpp"
#include "vulnerabilityScanner.hpp"
#include "wazuhDBQueryBuilder.hpp"

/**
 * @brief Orchestrates queries over the global Wazuh system and initiates scanners for each package.
 *
 * This class is responsible for managing the execution of queries within the global Wazuh environment.
 * It leverages a scanner mechanism to analyze each package encountered during the query process.
 *
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TGlobalDBFetch final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_suborchestration;
    std::optional<SocketDBWrapper> m_wdbSocketWrapper {std::nullopt};

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new global fetch object
     *
     * @param packageInsertOrchestration ScanContext instance.
     */
    explicit TGlobalDBFetch(std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> packageInsertOrchestration)
        : m_suborchestration(std::move(packageInsertOrchestration))
    {
    }
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        // Instance the socketWrapper for wazuhDb
        if (!m_wdbSocketWrapper)
        {
            try
            {
                m_wdbSocketWrapper.emplace(OS_CACHE_WDB_SOCKET);
            }
            catch (const std::exception& e)
            {
                logDebug2(WM_VULNSCAN_LOGTAG, "Error creating socketDBWrapper: %s", e.what());
            }
        }

        // Execute query
        nlohmann::json response;
        m_wdbSocketWrapper->query(WazuhDBQueryBuilder::builder().global().selectAll().fromTable("agent").build(),
                                  response);

        // Validate the response
        if (response.empty())
        {
            throw std::runtime_error("Empty response from Wazuh-DB");
        }
        // Iterate over all agents
        for (const auto& agent : response)
        {
            // Execute query for all packages
            nlohmann::json response_sysprograms;
            m_wdbSocketWrapper->query(
                WazuhDBQueryBuilder::builder().agent(agent.at("id")).selectAll().fromTable("sys_programs").build(),
                response_sysprograms);

            // Validate the response
            if (response_sysprograms.empty())
            {
                throw std::runtime_error("Empty response from Wazuh-DB");
            }

            for (auto package : response_sysprograms)
            {
                // Create context that builds the package info to send to suborchestration
            }
        }
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using GlobalDBFetch = TGlobalDBFetch<>;

#endif // __GLOBAL_DB_FETCH_HPP
