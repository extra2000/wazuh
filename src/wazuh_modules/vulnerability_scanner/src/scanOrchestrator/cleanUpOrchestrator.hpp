#ifndef __CLEAN_UP_ORCHESTRATOR_HPP
#define __CLEAN_UP_ORCHESTRATOR_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "vulnerabilityScanner.hpp"

/**
 * @brief Class in charge to clean up syscollector inventory from database and indexer.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TCleanUpOrchestrator final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_suborchestration;

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new clean-up object
     *
     * @param packageDeleOrchestration ScanContext instance.
     */
    explicit TCleanUpOrchestrator(
        std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> packageDeleOrchestration)
        : m_suborchestration(std::move(packageDeleOrchestration))
    {
    }
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        // ToDo
    }
};

using CleanUpOrchestrator = TCleanUpOrchestrator<>;

#endif // __CLEAN_UP_ORCHESTRATOR_HPP
